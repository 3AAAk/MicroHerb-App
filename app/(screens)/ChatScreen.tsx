/*import { useState } from "react";
import { View, Text, TextInput, TouchableOpacity, FlatList, ActivityIndicator } from "react-native";
import { Ionicons } from "@expo/vector-icons";

const OPENAI_API_KEY = ""; // üî¥ –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π API-–∫–ª—é—á
//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
const getAIResponse = async (message: string) => {
    try {
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: "gpt-3.5-turbo",
          messages: [
            { role: "system",content: "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Å–∞–¥–æ–≤–Ω–∏–∫ —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö, —Ü–≤–µ—Ç–∞—Ö –∏ –¥–µ—Ä–µ–≤—å—è—Ö. –¢—ã –¥–∞—ë—à—å —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ —Å–∞–¥–æ–º, –∫–æ–º–Ω–∞—Ç–Ω—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –∏ –æ–≥–æ—Ä–æ–¥–æ–º. –û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ, –Ω–æ –ø—Ä–æ—Å—Ç–æ, —á—Ç–æ–±—ã –¥–∞–∂–µ –Ω–æ–≤–∏—á–æ–∫ –ø–æ–Ω—è–ª. –î–∞–≤–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏–≤—É, –æ—Å–≤–µ—â–µ–Ω–∏—é, —É–¥–æ–±—Ä–µ–Ω–∏—è–º –∏ –∑–∞—â–∏—Ç–µ –æ—Ç –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π. –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –µ–≥–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö. –ë—É–¥—å –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π –ª—é–¥–µ–π –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –ø—Ä–∏—Ä–æ–¥–µ!. –ü–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –Ω–µ —Å—Ç–æ–∏—Ç –ø–∏—Å–∞—Ç—å –≤–æ–¥—É, —Å–æ–∫—Ä–∞—â–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ 200 —Å–ª–æ–≤"  },
            { role: "user", content: message }
          ],
          max_tokens: 300,
        }),
      });
  
      const data = await response.json();
      return data.choices?.[0]?.message?.content || "–û—à–∏–±–∫–∞: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò";
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI:", error);
      return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.";
    }
  };
  

export default function ChatScreen() {
  const [messages, setMessages] = useState<{ id: string; text: string; sender: "user" | "ai" }[]>([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);

  const sendMessage = async () => {
    if (!input.trim()) return;

     const userMessage = { id: Date.now().toString(), text: input, sender: "user" };
    setMessages((prevMessages) => [...prevMessages, userMessage]);
    setInput("");
    setLoading(true);

     const aiReplyText = await getAIResponse(input);
    setLoading(false);

     const aiMessage = { id: (Date.now() + 1).toString(), text: aiReplyText, sender: "ai" };
    setMessages((prevMessages) => [...prevMessages, aiMessage]);
  };

  return (
    <View style={{ flex: 1, padding: 15, backgroundColor: "#F5F5F5" }}>
       <FlatList
        data={messages}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <View
            style={{
              alignSelf: item.sender === "user" ? "flex-end" : "flex-start",
              backgroundColor: item.sender === "user" ? "#4A90E2" : "#CBD5B1",
              padding: 10,
              borderRadius: 10,
              marginVertical: 5,
              maxWidth: "70%",
            }}
          >
            <Text style={{ color: "white" }}>{item.text}</Text>
          </View>
        )}
      />

       {loading && <ActivityIndicator size="small" color="#4A90E2" style={{ marginBottom: 10 }} />}

   
      <View
        style={{
          flexDirection: "row",
          alignItems: "center",
          backgroundColor: "white",
          padding: 10,
          borderRadius: 25,
          marginBottom: 10,
        }}
      >
        <TextInput
          style={{ flex: 1, padding: 10 }}
          placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
          value={input}
          onChangeText={setInput}
        />
        <TouchableOpacity onPress={sendMessage} style={{ marginLeft: 10 }} disabled={loading}>
          <Ionicons name="send" size={24} color={loading ? "gray" : "#4A90E2"} />
        </TouchableOpacity>
      </View>
    </View>
  );
}
*/